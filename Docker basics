1. What is Docker? How does it differ from virtual machines?
Docker is a platform for containerizing applications, allowing them to run in isolated environments. Unlike VMs, Docker containers share the host OS kernel, making them lightweight and faster to start.
A self-sufficient runtime for containers

2. Explain the difference between CMD and ENTRYPOINT in a Dockerfile.
CMD: Provides default arguments for the container. Can be overridden during docker run.
ENTRYPOINT: Defines the main command for the container. Any arguments passed to docker run are appended to the ENTRYPOINT.

Conatiners: 
Conatiner are Nothing but an OS process, that behaves like VM using the Linux COncept of NS and Cgroup

kernel is the core component that acts as a bridge between the hardware and the software. It manages all the critical operations of the system, including memory management, process scheduling, and device control. The kernel is the first program loaded when the system starts and the last to shut down, ensuring the smooth functioning of the entire system. 

What is a Container?
A container is a lightweight, standalone, and executable software package that includes everything needed to run an application: code, runtime, libraries, and dependencies. Containers ensure that applications run reliably across different environments by isolating them from the underlying infrastructure. They use the host operating system kernel, making them much more efficient and faster to deploy than virtual machines.

Docker Architecture and Components:
Docker uses a client-server architecture:
Docker Client:The primary interface for users to interact with Docker.
Commands like docker build, docker run, and docker pull are sent to the Docker Daemon.
Docker Daemon (dockerd):The main service responsible for creating, managing, and running Docker containers.
Listens for Docker API requests from the Docker client.
Docker Images:Immutable snapshots of a container, including the application code, libraries, and dependencies.
Can be pulled from Docker Hub or custom repositories.
Docker Containers:Runtime instances of Docker images.
Each container is isolated but shares the OS kernel with the host.
Docker Registry:A centralized location for storing and distributing Docker images.
Examples: Docker Hub, Amazon ECR, Google Container Registry.
Storage Drivers:Manage how data is written and read on disk.
Examples: OverlayFS, AUFS.
Networking:Docker provides different networking modes (bridge, host, overlay) to allow communication between containers or with external networks.



Dockerfile:A Dockerfile is a script containing a series of instructions to build a Docker image. 
It automates the process of creating images, ensuring consistency and repeatability.

Common Dockerfile Instructions
---------------------------------
FROM    Specifies the base image. For eg for Python App.
RUN     Runs a command in the container.
COPY    Copies files from the host to the container.
WORKDIR Sets the working directory inside the container.
EXPOSE  Informs Docker that the container listens on a port.
ENV     Sets environment variables.
CMD        Provides the default command for the container.
ENTRYPOINT Defines the main executable command for the container.


docker commit:Takes a snapshot of a running or stopped container.
Saves it as a new Docker image.
Example: docker commit mycontainer mycustomimage:latest
You can then reuse or share this image just like any other Docker image.



The Docker -itd flag is a combination of three options used with docker run. Here's what each one means:
ðŸ”¹ -i (interactive)
Keeps STDIN (input) open so you can interact with the container.
Useful when running interactive programs like a shell.
ðŸ”¹ -t (tty)
Allocates a pseudo-terminal inside the container.
Makes the command-line interface behave more like a regular terminal (e.g., for bash).
ðŸ”¹ -d (detached)
Runs the container in the background.
You won't see live output unless you attach or log into it.
ðŸ’¡ So, -itd together means:
"Run the container in the background (-d), but also set it up to be interactive (-i) with a terminal (-t) if needed later."



The CMD ["nginx", "-g", "daemon off;"] command in a Dockerfile is used to start the Nginx web server as the main process within a container and keep it running in the foreground, rather than as a background daemon. This ensures that the Docker container stays active as long as Nginx is running. 
Here's a breakdown:
CMD:This Dockerfile instruction specifies the default command to run when the container starts. 
["nginx", "-g", "daemon off;"]:
This is the command that will be executed. It starts Nginx with the -g flag, which allows you to pass configuration options, and the daemon off; directive tells Nginx not to run as a daemon (background process). 
Foreground Process:By preventing Nginx from running as a daemon, it becomes the main process of the container. Docker tracks this process, and the container will stay running as long as Nginx is active. 
In essence, this command is a Docker best practice for running Nginx. It ensures that the container behaves as expected and allows for easier debugging if issues arise. If Nginx were to run as a daemon, it would quickly exit, and the container would stop running
